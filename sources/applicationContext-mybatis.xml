<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 读取JDBC的配置文件 -->
    <!-- Properties文件读取配置，base的properties -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- JNDI获取数据源(使用dbcp连接池) -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${uname}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <!-- 当前空前连接数<2 && (当前活动数>最大活动数-3) -->
        <property name="removeAbandoned" value="${removeAbandoned}"/>

        <!-- sql 心跳：保证连接池中连接是真实有效的连接-->
        <!-- testWhileIdle testOnBorrow testOnReturn validationQuery-select 1 因为8个小时后，mysql8个小时，会自动断开连接-->
        <!-- 开启Evict的定时校验，循环校验 -->
        <property name= "testWhileIdle" value="true"/>
        <!-- 在进行borrowObject处理时，会对拿到的连接进行校验-false -->
        <property name= "testOnBorrow" value="false"/>
        <!-- 在进行returnObject处理时，会对返回的连接进行校验-false -->
        <property name= "testOnReturn" value="false"/>
        <!-- 校验使用的sql语句，validationQuery,复杂的校验sql会影响性能 -->
        <property name= "validationQuery" value="select 1"/>
        <!-- 定义Evict的时间间隔，单位：毫秒，大于0才会开启evict -->
        <property name= "timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置每次校验连接的数量，一般等于maxActive -->
        <property name= "numTestsPerEvictionRun" value="${maxActive}"/>
    </bean>

    <!--redis 配置 开始-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property  name="maxActive"  value="90" />
        <property  name="maxIdle"   value="5" />
        <property  name="maxWait"  value="1000" />
        <property  name="testOnBorrow"  value="true" />
    </bean>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy" >
        <constructor-arg ref="jedisPoolConfig"/>
        <constructor-arg value="10.0.0.194"/>
        <constructor-arg value="6379"/>
    </bean>
  <!--   <bean id="redisAPI" class="org.slsale.common.RedisAPI">
        <property name="jedisPool" ref="jedisPool"/>
    </bean>-->
    <!-- redis 配置结束 -->

    <!-- mybatis-spring 配置 结束 -->


    <!-- enable autowire 启用spring mvc 注解-->
    <context:annotation-config />
    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- 事务管理 -->
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 配置Mybatis sqlSessionFactoryBean -->
    <!-- define the SqlSessionFactory, notice that configLocation is not needed when you use MapperFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>

    <!-- AOP 事务处理 开始 -->
    <aop:aspectj-autoproxy />
    <aop:config  proxy-target-class="true">
        <aop:pointcut expression="execution(* *org.slsale.service..*(..))" id="transService"/>
        <aop:advisor pointcut-ref="transService" advice-ref="txAdvice" />
    </aop:config>
    <!-- txAdvice:需要定义事务管理器，进行事务处理-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="hl*"  propagation="REQUIRED" rollback-for="Exception"  />
        </tx:attributes>
    </tx:advice>
    <!-- AOP 事务处理 结束 -->

    <!-- mapper 接口所在包名，spring会自动查找其下的Mapper-->
    <!-- scan for mappers and let them be autowired -->
    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.slsale.dao" />
    </bean>
</beans>
